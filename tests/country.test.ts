import request from "supertest";
import app from "../src/index";
import CountryController from "../src/Controllers/CountryController";
import { db } from "../src/utils/db.server";

describe("GET /api/countries", () => {
  it("should return all countries", async () => {
    const response = await request(app).get("/api/countries");
    expect(response.status).toBe(200);
    expect(response.body.length).toBeGreaterThan(0);
  });
});


// Generated by CodiumAI

describe('index', () => {

  // Returns an array of countries when the database is not empty
  it('should return an array of countries when the database is not empty', () => {
    // Mock the database response
    const mockCountries = [{ id: 1, name: 'Country 1', flag: 'Flag 1' }, { id: 2, name: 'Country 2', flag: 'Flag 2' }];
    db.country.findMany = jest.fn().mockResolvedValue(mockCountries);

    // Create an instance of CountryController
    const countryController = new CountryController();

    // Call the index method
    const result = countryController.index();

    // Assert the result
    expect(result).resolves.toEqual(mockCountries);
  });

  // Returns an empty array when the database is empty
  it('should return an empty array when the database is empty', () => {
    // Mock the database response
    const mockCountries: any[] = [];
    db.country.findMany = jest.fn().mockResolvedValue(mockCountries);

    // Create an instance of CountryController
    const countryController = new CountryController();

    // Call the index method
    const result = countryController.index();

    // Assert the result
    expect(result).resolves.toEqual(mockCountries);
  });

  // Returns an empty array when the database connection fails
  it('should return an empty array when the database connection fails', () => {
    // Mock the database response
    db.country.findMany = jest.fn().mockRejectedValue(new Error('Database connection failed'));

    // Create an instance of CountryController
    const countryController = new CountryController();

    // Call the index method
    const result = countryController.index();

    // Assert the result
    expect(result).resolves.toEqual([]);
  });

  // Throws an error when the database query fails
  it('should throw an error when the database query fails', () => {
    // Mock the database response
    db.country.findMany = jest.fn().mockRejectedValue(new Error('Database query failed'));

    // Create an instance of CountryController
    const countryController = new CountryController();

    // Call the index method
    const result = countryController.index();

    // Assert the result
    expect(result).rejects.toThrowError('Database query failed');
  });

  // Returns an array of countries sorted by name in ascending order
  it('should return an array of countries sorted by name in ascending order', () => {
    // Mock the database response
    const mockCountries = [{ id: 2, name: 'Country 2', flag: 'Flag 2' }, { id: 1, name: 'Country 1', flag: 'Flag 1' }];
    db.country.findMany = jest.fn().mockResolvedValue(mockCountries);

    // Create an instance of CountryController
    const countryController = new CountryController();

    // Call the index method
    const result = countryController.index();

    // Assert the result
    expect(result).resolves.toEqual(mockCountries);
  });

  // Returns an array of countries sorted by name in descending order
  it('should return an array of countries sorted by name in descending order', () => {
    // Mock the database response
    const mockCountries = [{ id: 1, name: 'Country 1', flag: 'Flag 1' }, { id: 2, name: 'Country 2', flag: 'Flag 2' }];
    db.country.findMany = jest.fn().mockResolvedValue(mockCountries);

    // Create an instance of CountryController
    const countryController = new CountryController();

    // Call the index method
    const result = countryController.index();

    // Assert the result
    expect(result).resolves.toEqual(mockCountries);
  });
});
